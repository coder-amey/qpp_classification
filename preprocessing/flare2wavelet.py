# External imports
import matplotlib.pylab as plt
import matplotlib.ticker as ticker
from matplotlib.gridspec import GridSpec
import numpy as np
import os
import pandas as pd
from scipy.interpolate import make_interp_spline

# Local imports
from wavelet_transform.waveletFunctions import wavelet

# Global variables
DATA_PATH = "/dcs/large/u2288122/Workspace/qpp_classification/consolidated_data"
DT = 1
PADDING = 1
CLIP = 0
BUFFER = 10

def moving_average_filter(y, window_size=10):
    window = np.ones(window_size) / window_size
    # Apply the moving average filter using convolution
    return np.convolve(y, window, mode='same')

def wavelet_transform_fn(flux_array, clipping=CLIP):
    # Find and clip peak
    # Alter dt
    # Try without padding
    # Wavelet transform:
    flux_array = np.array(flux_array)
    peak = np.argmax(np.array(flux_array))
    flux_array -= np.mean(flux_array, axis=0)
    
    clipped_array = [0] * (peak - BUFFER)
    clipped_array.extend(flux_array[peak - BUFFER::])
    
    n = len(clipped_array)
    if clipping:
        wave, period, scale, coi = wavelet(clipped_array, dt=DT, pad=PADDING, mother='MORLET')
    else:
        wave, period, scale, coi = wavelet(flux_array, dt=DT, pad=PADDING, mother='MORLET')
    power = (np.abs(wave)) ** 2  # compute wavelet power spectrum
    global_ws = (np.sum(power, axis=1) / n)  # time-average over all times
    return clipped_array, power, global_ws, period

def plot_flare_transform(flux_array, clipping=CLIP):
    # --- Plot time series
    # [!] As-is
    dt = DT
    clipped_array, power, global_ws, period = wavelet_transform_fn(flux_array)
    power = power / np.max(power, axis=0)
    power = 1 - power
    np.clip(power, 0.01, 1, power)
    time = np.arange(len(flux_array)) * dt # construct time array
    # xlim = ([1870, 2000])  # plotting range
    fig = plt.figure(figsize=(9, 10))
    gs = GridSpec(3, 4, hspace=0.4, wspace=0.75)
    plt.subplots_adjust(left=0.1, bottom=0.05, right=0.9, top=0.95,
                        wspace=0, hspace=0)
    plt.subplot(gs[0, 0:3])
    if clipping:
        plt.plot(time, clipped_array, 'k')
    else:
        plt.plot(time, flux_array, 'k')
    plt.xlabel('Time')
    plt.ylabel('Flux')
    plt.title('Flare')

    # --- Contour plot wavelet power spectrum
    # plt3 = plt.subplot(3, 1, 2)
    plt3 = plt.subplot(gs[1, 0:3])
    levels = list(range(256))
    # *** or use 'contour'
    CS = plt.contourf(time, period, np.power(0.3, power)) #, len(levels))
    im = plt.contourf(CS, cmap='YlOrBr') #, levels=levels, cmap='hsv')
    plt.xlabel('Time')
    plt.ylabel('Period')
    plt3.set_yscale('log', basey=10)
    plt.title('Wavelet Power Spectrum')
    
    # --- Plot global wavelet spectrum
    plt4 = plt.subplot(gs[1, -1])
    plt.plot(global_ws, period)
    plt.xlabel('Power')
    plt.title('Global Wavelet Spectrum')
    # format y-scale
    plt4.set_yscale('log', basey=10)
    ax = plt.gca().yaxis
    ax.set_major_formatter(ticker.ScalarFormatter())
    plt4.ticklabel_format(axis='y', style='plain')

    plt.show()


if __name__ == "__main__":
    flares_dataset = pd.read_pickle(os.path.join(DATA_PATH, 'flares.pkl'))
    #_, power, global_ws, period = wavelet_transform_fn(flares_dataset.iloc[0].X)
    #print(global_ws)

    time = np.arange(300)
    """noise = 1.3 * np.random.rand(300)
    qpp = 2 * np.exp(-(time - 50)/(50)) * np.sin(0.2 * (time - 50))
    sig = 5 * np.exp(-time/(100)) * np.sin(0.1 * time)
    """
    # sig = [0.8968962073549294, 0.18788682019883624, -0.1287894983170269, -0.024601616841067042, 0.6197553754133734, 0.40888413759852255, 0.5303453363075544, 0.23662370003788752, 0.7694710717612967, -0.09189140341638469, 0.96320930431377, 0.7724067705340871, 0.2920997943603917, 0.43753619013928335, 1.6290527916717183, 1.8016969584849623, 2.436359934969204, 2.4896383012007064, 3.893497234857761, 3.7915037832594307, 3.496625241960516, 4.106783765186804, 5.627553279975365, 6.279354681823017, 6.781321573351734, 6.977562415762794, 6.645887858345723, 8.258846338090319, 8.89373918342762, 8.71357318142382, 7.850461077071835, 8.08324622157658, 7.386531962163841, 7.39640656804079, 7.743789788598468, 8.527201375153059, 8.682423248350508, 8.188561445206512, 9.15098239068419, 8.596375100607016, 8.808359328416444, 9.104431974919013, 8.059135833588858, 7.501776859789443, 7.358938382882682, 6.200380132355602, 5.7558029247238505, 4.769228274804513, 5.334375399653711, 5.188301833077662, 5.278620496581681, 5.873927036758416, 6.370020737194376, 5.914212713775732, 5.98275258990684, 5.979872616693824, 5.832891233886851, 5.404616290208876, 5.055919226421762, 4.930175569494901, 3.8269069743235726, 3.5590499034687064, 4.614570323999192, 3.8961706100690394, 4.016097925234045, 4.044458882515653, 4.478996002425881, 3.4284569604459, 4.260624023916029, 4.283018182021876, 4.39048207883935, 3.6471200427683472, 3.5209832699019645, 3.226492988326669, 3.1505552696045647, 3.337488527070235, 2.084247244476022, 2.603172961832707, 1.8577979422514779, 2.6256030713515854, 2.65646881201734, 2.839651421460209, 2.4545006910867313, 2.090229724120371, 2.224401286066368, 1.5910177529556946, 1.5908247734343273, 1.9050999229714443, 2.789427679156831, 2.555202259946602, 1.6002130983613385, 1.6074322515214599, 1.1526376942621774, 2.193155471626144, 2.1023139399392714, 1.6280200381934642, 1.7413848216675525, 2.1300802229115487, 2.019588387839012, 1.6410268705931932, 2.166820790708926, 1.6430856817672084, 1.9050156213744553, 1.4407221565721162, 1.678873272256414, 1.0425942909460773, 1.3125709545137036, 1.127105577391685, 1.9226972834607703, 1.4960635377227165, 1.318420002932211, 1.8418331237216305, 1.2568528744215715, 0.7673214447717102, 1.1856893261718189, 0.5043712987362692, 1.0993930679661692, 0.7130260118273473, 0.6625981508097245, 0.6616593393730232, 0.09566529698890314, 1.1799187370870698, 0.8336271730279275, 0.589109794400575, 0.9465436260234273, 0.6498115440263946, 1.5999899212903457, 1.4835873515713713, 1.2275250297886722, 0.16522524333875, 0.8349360487740631, 1.2467307834640342, 0.7375635296247623, 1.2195968249942013, 0.6334724315300293, 1.309865206742322, 1.2378005508890815, 0.17735831277545588, 0.9284646173752329, 0.5548092703301908, 0.5149442044252581, 0.7325834005561201, 1.3335577927916673, 0.8229329908644767, 1.0260326030176603, 1.2859160013514508, 0.7314832527788435, 0.9663324603078121, 1.2710698732604606, 1.132709484163934, 1.7750536220851578, 1.02286521177441, 1.4662438351241946, 1.4524684560723493, 1.520889174745549, 1.6091654459899454, 1.608884298232891, 1.1590109271890983, 1.5869719445387793, 1.2931047859080191, 1.38388784013301, 2.0134522796419105, 1.0805976640412585, 1.3617812708102845, 0.8388912631154641, 0.755456838777079, 0.9772996096695761, 1.0199870937074336, 0.8970093889250287, 0.7828665391618523, 1.4731503032686184, 1.478316323795806, 1.0590185739556017, 0.5445985784079724, 0.8071512485532262, 0.2240877262048937, 0.1070975632159551, 0.20098394453038948, -0.1937204917358354, -0.07881682393452061, 0.6986252672135598, 0.07798976015380576, 0.9869491075663335, 1.6824029462208685, 0.969518159232068, 0.5262690683546636, 0.9403641870597005, 1.318738794500284, 0.3279790277825959, 0.15938648793824928, 0.5762094680057974, 0.8709507041594515, 0.8427481236489597, 0.1047641422518617, 1.3505581706572891, 0.5864087468607245, 1.5676547643750256, 1.0217276880081176, 0.4244034180759514, 0.9283653528735177, 1.642025827254272, 0.9007778597360281, 0.48075198137966346, 0.5040703204614769, 0.6413620139909466, 0.39043015994612434, 0.19159750434247402, 0.22550761673729447, 0.8376305307969942, 0.9934850571840547, 0.5198044414685892, 0.3709411159831141, -0.37676416524254464, 1.099172069934066, -0.30821350370755873, 1.1191180324466474, 0.670811489848923, -0.15683491347839484, 0.3296495740050432, 0.2790686061961594, -0.0630490992990621, 0.14095134552295685, 0.5083176634662905, 0.16313821829226505, 0.28438684031275546, 0.7092930507609152, 0.4298311086708171, 0.10991424788244775, -0.358963657821481, -0.9268223934464829, -0.5352531261542429, -0.3117513698424639, -0.2695567474819349, 0.08947875295651275, 0.44014914095832575, 0.3171725422697343, 0.17966728520750058, 0.4447186919409701, 0.10694793690296489, 0.4801044973892431, 0.24640636408265437, 0.61131063981371, -0.23722599396811295, 0.05158380422174624, -0.19053889856969008, 0.04740604867276177, 0.6475042163518703, 0.25326904420574164, 0.3387107610964707, 1.3796211054438752, 0.9002670114534657, 1.2470527515022511, 1.0726722898005066, 0.38565627436294475, 0.25765701799294055, 1.218241616182169, 0.44041480027933666, 0.7814505062226971, 0.3290993871863339, 0.05478037220349419, 0.32061035769030743, 0.16799059489577783, 1.1500289235484988, 0.11489638927073703, 0.6136593685420485, 1.05787893040619, 0.22652011574110048, 0.9737517799203343, 0.6278616599512479, 1.3039221717611618, 0.6488526533041936, 0.6082228542293944, 0.9978642303107195, 1.1937995061751259, 0.5384440906383321, 0.2920277162001067, 1.0220115919203236, 0.728098076178129, 0.0981864572269156, 1.2895034718621101, 0.5661901449841189, 1.4631001466238995, 0.9658323806780083, 0.8636494634396816, 0.6533530548514901, -0.13278151999329219, 0.09703590924558719, -0.17251473223141733, 0.7932974763801116, -0.13816615370651997, -0.42393636329780954, -0.20282893057425555, 0.4634732323789625, 0.5601632540516639, 0.5520649146115653, 0.7534635689467517, -0.21344436446530013, -0.1076088782649558, 0.0945077349340393, 0.19880878154722031]
    
    # Generate signals
    # raw_signal = sig + qpp + noise
    raw_signal = sig = [0.8968962073549294, 0.18788682019883624, -0.1287894983170269, -0.024601616841067042, 0.6197553754133734, 0.40888413759852255, 0.5303453363075544, 0.23662370003788752, 0.7694710717612967, -0.09189140341638469, 0.96320930431377, 0.7724067705340871, 0.2920997943603917, 0.43753619013928335, 1.6290527916717183, 1.8016969584849623, 2.436359934969204, 2.4896383012007064, 3.893497234857761, 3.7915037832594307, 3.496625241960516, 4.106783765186804, 5.627553279975365, 6.279354681823017, 6.781321573351734, 6.977562415762794, 6.645887858345723, 8.258846338090319, 8.89373918342762, 8.71357318142382, 7.850461077071835, 8.08324622157658, 7.386531962163841, 7.39640656804079, 7.743789788598468, 8.527201375153059, 8.682423248350508, 8.188561445206512, 9.15098239068419, 8.596375100607016, 8.808359328416444, 9.104431974919013, 8.059135833588858, 7.501776859789443, 7.358938382882682, 6.200380132355602, 5.7558029247238505, 4.769228274804513, 5.334375399653711, 5.188301833077662, 5.278620496581681, 5.873927036758416, 6.370020737194376, 5.914212713775732, 5.98275258990684, 5.979872616693824, 5.832891233886851, 5.404616290208876, 5.055919226421762, 4.930175569494901, 3.8269069743235726, 3.5590499034687064, 4.614570323999192, 3.8961706100690394, 4.016097925234045, 4.044458882515653, 4.478996002425881, 3.4284569604459, 4.260624023916029, 4.283018182021876, 4.39048207883935, 3.6471200427683472, 3.5209832699019645, 3.226492988326669, 3.1505552696045647, 3.337488527070235, 2.084247244476022, 2.603172961832707, 1.8577979422514779, 2.6256030713515854, 2.65646881201734, 2.839651421460209, 2.4545006910867313, 2.090229724120371, 2.224401286066368, 1.5910177529556946, 1.5908247734343273, 1.9050999229714443, 2.789427679156831, 2.555202259946602, 1.6002130983613385, 1.6074322515214599, 1.1526376942621774, 2.193155471626144, 2.1023139399392714, 1.6280200381934642, 1.7413848216675525, 2.1300802229115487, 2.019588387839012, 1.6410268705931932, 2.166820790708926, 1.6430856817672084, 1.9050156213744553, 1.4407221565721162, 1.678873272256414, 1.0425942909460773, 1.3125709545137036, 1.127105577391685, 1.9226972834607703, 1.4960635377227165, 1.318420002932211, 1.8418331237216305, 1.2568528744215715, 0.7673214447717102, 1.1856893261718189, 0.5043712987362692, 1.0993930679661692, 0.7130260118273473, 0.6625981508097245, 0.6616593393730232, 0.09566529698890314, 1.1799187370870698, 0.8336271730279275, 0.589109794400575, 0.9465436260234273, 0.6498115440263946, 1.5999899212903457, 1.4835873515713713, 1.2275250297886722, 0.16522524333875, 0.8349360487740631, 1.2467307834640342, 0.7375635296247623, 1.2195968249942013, 0.6334724315300293, 1.309865206742322, 1.2378005508890815, 0.17735831277545588, 0.9284646173752329, 0.5548092703301908, 0.5149442044252581, 0.7325834005561201, 1.3335577927916673, 0.8229329908644767, 1.0260326030176603, 1.2859160013514508, 0.7314832527788435, 0.9663324603078121, 1.2710698732604606, 1.132709484163934, 1.7750536220851578, 1.02286521177441, 1.4662438351241946, 1.4524684560723493, 1.520889174745549, 1.6091654459899454, 1.608884298232891, 1.1590109271890983, 1.5869719445387793, 1.2931047859080191, 1.38388784013301, 2.0134522796419105, 1.0805976640412585, 1.3617812708102845, 0.8388912631154641, 0.755456838777079, 0.9772996096695761, 1.0199870937074336, 0.8970093889250287, 0.7828665391618523, 1.4731503032686184, 1.478316323795806, 1.0590185739556017, 0.5445985784079724, 0.8071512485532262, 0.2240877262048937, 0.1070975632159551, 0.20098394453038948, -0.1937204917358354, -0.07881682393452061, 0.6986252672135598, 0.07798976015380576, 0.9869491075663335, 1.6824029462208685, 0.969518159232068, 0.5262690683546636, 0.9403641870597005, 1.318738794500284, 0.3279790277825959, 0.15938648793824928, 0.5762094680057974, 0.8709507041594515, 0.8427481236489597, 0.1047641422518617, 1.3505581706572891, 0.5864087468607245, 1.5676547643750256, 1.0217276880081176, 0.4244034180759514, 0.9283653528735177, 1.642025827254272, 0.9007778597360281, 0.48075198137966346, 0.5040703204614769, 0.6413620139909466, 0.39043015994612434, 0.19159750434247402, 0.22550761673729447, 0.8376305307969942, 0.9934850571840547, 0.5198044414685892, 0.3709411159831141, -0.37676416524254464, 1.099172069934066, -0.30821350370755873, 1.1191180324466474, 0.670811489848923, -0.15683491347839484, 0.3296495740050432, 0.2790686061961594, -0.0630490992990621, 0.14095134552295685, 0.5083176634662905, 0.16313821829226505, 0.28438684031275546, 0.7092930507609152, 0.4298311086708171, 0.10991424788244775, -0.358963657821481, -0.9268223934464829, -0.5352531261542429, -0.3117513698424639, -0.2695567474819349, 0.08947875295651275, 0.44014914095832575, 0.3171725422697343, 0.17966728520750058, 0.4447186919409701, 0.10694793690296489, 0.4801044973892431, 0.24640636408265437, 0.61131063981371, -0.23722599396811295, 0.05158380422174624, -0.19053889856969008, 0.04740604867276177, 0.6475042163518703, 0.25326904420574164, 0.3387107610964707, 1.3796211054438752, 0.9002670114534657, 1.2470527515022511, 1.0726722898005066, 0.38565627436294475, 0.25765701799294055, 1.218241616182169, 0.44041480027933666, 0.7814505062226971, 0.3290993871863339, 0.05478037220349419, 0.32061035769030743, 0.16799059489577783, 1.1500289235484988, 0.11489638927073703, 0.6136593685420485, 1.05787893040619, 0.22652011574110048, 0.9737517799203343, 0.6278616599512479, 1.3039221717611618, 0.6488526533041936, 0.6082228542293944, 0.9978642303107195, 1.1937995061751259, 0.5384440906383321, 0.2920277162001067, 1.0220115919203236, 0.728098076178129, 0.0981864572269156, 1.2895034718621101, 0.5661901449841189, 1.4631001466238995, 0.9658323806780083, 0.8636494634396816, 0.6533530548514901, -0.13278151999329219, 0.09703590924558719, -0.17251473223141733, 0.7932974763801116, -0.13816615370651997, -0.42393636329780954, -0.20282893057425555, 0.4634732323789625, 0.5601632540516639, 0.5520649146115653, 0.7534635689467517, -0.21344436446530013, -0.1076088782649558, 0.0945077349340393, 0.19880878154722031]
    denoised_signal = raw_signal - np.mean(raw_signal)

    # Create B-spline
    peak_index = np.argmax(raw_signal)
    bspline = make_interp_spline(time, moving_average_filter(denoised_signal, window_size=20), k=9)
    trend = bspline(time)
    trend = moving_average_filter(denoised_signal, window_size=20)

    # Generate the de-trended signal
    detrended_signal = denoised_signal - trend
    print(detrended_signal)

    # Plot raw signal
    fig, ax = plt.subplots(3, 1, figsize=(8, 12))

    ax[0].plot(time, raw_signal)
    ax[0].set_title('Raw Signal')

    # Plot the denoised signal along with the trend
    ax[1].plot(time, denoised_signal)
    ax[1].plot(time, trend, 'r--')
    ax[1].set_title('Denoised Signal with trendline')

    
    # Plot detrended signal
    ax[2].plot(time, detrended_signal)
    ax[2].set_title('Detrended Signal')

    plt.tight_layout()
    plt.show()

    plot_flare_transform(detrended_signal)

    exit()
    plot_flare_transform(sig+noise)
    plot_flare_transform(sig+qpp+noise)

    
    print(flares_dataset.iloc[0].y)
    plot_flare_transform(flares_dataset.iloc[0].X)
    

    
    print(flares_dataset.iloc[1].y)
    plot_flare_transform(flares_dataset.iloc[1].X)
    
    time = np.arange(300)
    noise = 0.75* (2 * np.random.rand(300)- 1)
    qpp = np.exp(-(time - 50)/(50)) * np.sin(0.2 * (time - 50))
    sig = np.exp(-time/(100)) * np.sin(0.1 * time)

    #plt.plot(time, sig+noise+qpp)
    #plt.show()


